assert(loadScript("/SCRIPTS/BF/msp_sp.lua"))()local a=68;local b=250;local c=80;local d=2;local e=3;local f=4;local g=5;local h=d;local i=nil;local j=1;local k=1;local l=0;local m=0;local n=0;local o=0;backgroundFill=backgroundFill or ERASE;foregroundColor=foregroundColor or SOLID;globalTextOptions=globalTextOptions or 0;function mergeUint16(p,q)return bit32.lshift(q,8)+p end;freqLookup={{5865,5845,5825,5805,5785,5765,5745,5725},{5733,5752,5771,5790,5809,5828,5847,5866},{5705,5685,5665,5645,5885,5905,5925,5945},{5740,5760,5780,5800,5820,5840,5860,5880},{5658,5695,5732,5769,5806,5843,5880,5917}}function updateVTXFreq(r)r.values["f"]=freqLookup[r.values[2]][r.values[3]]end;function postReadVTX(r)if r.values[1]==3 then r.fields[3].table={25,200,500,800}r.fields[3].max=4 elseif r.values[1]==4 then r.fields[3].table={25,100,200,400,600}r.fields[3].max=5 else end;if r.values and r.values[2]and r.values[3]then if r.values[2]>0 and r.values[3]>0 then updateVTXFreq(r)else r.values=nil end end end;function getWriteValuesVTX(s)local t=(s[2]-1)*8+s[3]-1;return{bit32.band(t,0xFF),bit32.rshift(t,8),s[4],s[5]}end;function postReadRates(r)if#r.values==12 then r.values[9]=mergeUint16(r.values[9],r.values[10])end end;function getWriteValuesRates(s)return{s[1],s[2],s[3],s[4],s[5],s[6],s[7],s[8],bit32.band(s[9],0xFF),bit32.rshift(s[9],8),s[11],s[12]}end;function postReadRatesAdv(r)if#r.values==23 then r.values[20]=mergeUint16(r.values[20],r.values[21])r.values[22]=mergeUint16(r.values[22],r.values[23])/1000 end end;function getWriteValuesRatesAdv(s)return{s[1],s[2],s[3],s[4],s[5],s[6],s[7],s[8],s[9],s[10],s[11],s[12],s[13],s[14],s[15],s[16],s[17],s[18],s[19],bit32.band(s[20],0xFF),bit32.rshift(s[20],8),bit32.band(s[22]*1000,0xFF),bit32.rshift(s[22]*1000,8)}end;function postReadFilters(r)if#r.values==18 then r.values[2]=mergeUint16(r.values[2],r.values[3])r.values[3]=mergeUint16(r.values[4],r.values[5])r.values[4]=mergeUint16(r.values[6],r.values[7])r.values[5]=mergeUint16(r.values[8],r.values[9])r.values[6]=mergeUint16(r.values[14],r.values[15])r.values[7]=mergeUint16(r.values[16],r.values[17])r.values[8]=mergeUint16(r.values[10],r.values[11])r.values[9]=mergeUint16(r.values[12],r.values[13])r.values[10]=r.values[18]end end;function getWriteValuesFilters(s)return{s[1],bit32.band(s[2],0xFF),bit32.band(bit32.rshift(s[2],8),0xFF),bit32.band(s[3],0xFF),bit32.band(bit32.rshift(s[3],8),0xFF),bit32.band(s[4],0xFF),bit32.band(bit32.rshift(s[4],8),0xFF),bit32.band(s[5],0xFF),bit32.band(bit32.rshift(s[5],8),0xFF),bit32.band(s[8],0xFF),bit32.band(bit32.rshift(s[8],8),0xFF),bit32.band(s[9],0xFF),bit32.band(bit32.rshift(s[9],8),0xFF),bit32.band(s[6],0xFF),bit32.band(bit32.rshift(s[6],8),0xFF),bit32.band(s[7],0xFF),bit32.band(bit32.rshift(s[7],8),0xFF),s[10]}end;function postReadAdvanced(r)if#r.values==10 then r.values[5]=mergeUint16(r.values[5],r.values[6])r.values[7]=mergeUint16(r.values[7],r.values[8])r.fields[2].table=r.gyroTables[r.values[9]]r.fields[3].table=r.gyroTables[r.values[9]]end end;function updateGyroTables()SetupPages[j].fields[2].table=SetupPages[j].gyroTables[SetupPages[j].values[9]]SetupPages[j].fields[3].table=SetupPages[j].gyroTables[SetupPages[j].values[9]]end;function getWriteValuesAdvanced(s)return{s[1],s[2],s[3],s[4],bit32.band(s[5],0xFF),bit32.rshift(s[5],8),bit32.band(s[7],0xFF),bit32.rshift(s[7],8),s[9],s[10]}end;local function u(v)local r=SetupPages[j]if r.values then if r.getWriteValues then mspSendRequest(r.write,r.getWriteValues(r.values))else mspSendRequest(r.write,r.values)end;l=getTime()if h==f then n=n+1 else h=f;n=0;o=r.saveMaxRetries or 2;m=r.saveTimeout or 150 end end end;local function w()for x=1,#SetupPages do local r=SetupPages[x]r.values=nil end;h=d;l=0 end;local y={{t="save page",f=u},{t="reload",f=w}}local z=false;local A=false;local function B(C,D)if C==nil or D==nil then return end;local r=SetupPages[j]if C==r.write then if r.eepromWrite then mspSendRequest(b,{})end;return end;if C==b then h=d;r.values=nil;l=0;if r.reboot then mspSendRequest(a,{})end;return end;if C~=r.read then return end;if#D>0 then r.values={}for x=1,#D do r.values[x]=D[x]end;if r.postRead~=nil then r.postRead(r)end end end;local function E()return#SetupPages[j].fields end;function cachePageElements(r)if not i then i=assert(loadScript(screenPath..r.screen))()r.read=i.read;r.write=i.write;r.eepromWrite=i.eepromWrite;r.reboot=i.reboot;if i.postRead then r.postRead=i.postRead end;if i.getWriteValues then r.getWriteValues=i.getWriteValues end;if i.saveMaxRetries then r.saveMaxRetries=i.saveMaxRetries end;if i.saveTimeout then r.saveTimeout=i.saveTimeout end;if i.gyroTables then r.gyroTables=i.gyroTables end;r.title=i.title;r.text=i.text;r.fields=i.fields end end;function clearPageElements(r)r.read=nil;r.write=nil;r.eepromWrite=nil;r.reboot=nil;r.postRead=nil;r.getWriteValues=nil;r.saveMaxRetries=nil;r.saveTimeout=nil;r.title=nil;r.text=nil;r.fields=nil;r.values=nil;r.gyroTables=nil;i=nil end;local function F(G)j=j+G;if j>#SetupPages then j=1 elseif j<1 then j=#SetupPages end;k=1 end;local function H(G)k=k+G;if k>E()then k=1 elseif k<1 then k=E()end end;local function I(G)A=A+G;if A>#y then A=1 elseif A<1 then A=#y end end;local function J(r)if r.read and(r.reqTS==nil or r.reqTS+c<=getTime())then r.reqTS=getTime()mspSendRequest(r.read,{})end end;function drawScreenTitle(K)lcd.drawFilledRectangle(0,0,LCD_W,10)lcd.drawText(1,1,K,INVERS)end;local function L(r,M)local K=r.title;drawScreenTitle("Betaflight / "..K)for x=1,#r.text do local N=r.text[x]if N.to==nil then lcd.drawText(N.x,N.y,N.t,globalTextOptions)else lcd.drawText(N.x,N.y,N.t,N.to)end end;for x=1,#r.fields do local N=r.fields[x]local O=globalTextOptions;if x==k then O=INVERS;if h==e then O=O+BLINK end end;local P=20;if N.t~=nil then lcd.drawText(N.x,N.y,N.t..":",globalTextOptions)if N.sp~=nil then P=N.sp end else P=0 end;local Q=N.i or x;if r.values and r.values[Q]then local R=r.values[Q]if N.table and N.table[r.values[Q]]then R=N.table[r.values[Q]]end;lcd.drawText(N.x+P,N.y,R,O)else lcd.drawText(N.x+P,N.y,"---",O)end end end;local function S(R,T,U)if R<T then R=T elseif R>U then R=U end;return R end;local function V()local r=SetupPages[j]return r.fields[k]end;local function W(G)local r=SetupPages[j]local X=r.fields[k]local Q=X.i or k;r.values[Q]=S(r.values[Q]+G,X.min or 0,X.max or 255)if X.upd then X.upd(r)end end;local function Y()local Z=MenuBox.x;local _=MenuBox.y;local a0=MenuBox.w;local a1=MenuBox.h_line;local a2=MenuBox.h_offset;local a3=#y*a1+a2*2;lcd.drawFilledRectangle(Z,_,a0,a3,backgroundFill)lcd.drawRectangle(Z,_,a0-1,a3-1,foregroundColor)lcd.drawText(Z+a1/2,_+a2,"Menu:",globalTextOptions)for x,a4 in ipairs(y)do local O=globalTextOptions;if A==x then O=O+INVERS end;lcd.drawText(Z+MenuBox.x_offset,_+(x-1)*a1+a2,a4.t,O)end end;local a5=0;local a6=0;local function a7(a8)local a9=getTime()if a5+50<a9 then w()end;a5=a9;if h==f and l+m<a9 then if n<o then u()else h=d;w()end end;mspProcessTxQ()if a8==EVT_MENU_LONG then A=1;h=g elseif EVT_PAGEUP_FIRST and a8==EVT_ENTER_LONG then A=1;a6=1;h=g elseif h==g then if a8==EVT_EXIT_BREAK then h=d elseif a8==EVT_PLUS_BREAK or a8==EVT_ROT_LEFT then I(-1)elseif a8==EVT_MINUS_BREAK or a8==EVT_ROT_RIGHT then I(1)elseif a8==EVT_ENTER_BREAK then if a6==1 then a6=0 else h=d;y[A].f()end end elseif h<=d then if a8==EVT_PAGEUP_FIRST then clearPageElements(SetupPages[j])F(-1)elseif a8==EVT_MENU_BREAK or a8==EVT_PAGEDN_FIRST then clearPageElements(SetupPages[j])F(1)elseif a8==EVT_PLUS_BREAK or a8==EVT_ROT_LEFT then H(-1)elseif a8==EVT_MINUS_BREAK or a8==EVT_ROT_RIGHT then H(1)elseif a8==EVT_ENTER_BREAK then local r=SetupPages[j]local X=r.fields[k]local Q=X.i or k;if r.values and r.values[Q]and X.ro~=true then h=e end end elseif h==e then if a8==EVT_EXIT_BREAK or a8==EVT_ENTER_BREAK then h=d elseif a8==EVT_PLUS_FIRST or a8==EVT_PLUS_REPT or a8==EVT_ROT_RIGHT then W(1)elseif a8==EVT_MINUS_FIRST or a8==EVT_MINUS_REPT or a8==EVT_ROT_LEFT then W(-1)end end;local r=SetupPages[j]local M=false;cachePageElements(r)if not r.values then J(r)M=true end;lcd.clear()if TEXT_BGCOLOR then lcd.drawFilledRectangle(0,0,LCD_W,LCD_H,TEXT_BGCOLOR)end;L(r,M)if getValue("RSSI")==0 then lcd.drawText(NoTelem[1],NoTelem[2],NoTelem[3],NoTelem[4])end;if h==g then Y()elseif h==f then lcd.drawFilledRectangle(SaveBox.x,SaveBox.y,SaveBox.w,SaveBox.h,backgroundFill)lcd.drawRectangle(SaveBox.x,SaveBox.y,SaveBox.w,SaveBox.h,SOLID)lcd.drawText(SaveBox.x+SaveBox.x_offset,SaveBox.y+SaveBox.h_offset,"Saving...",DBLSIZE+BLINK+globalTextOptions)end;B(mspPollReply())return 0 end;return a7
