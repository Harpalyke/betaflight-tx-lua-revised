assert(loadScript("/SCRIPTS/BF/msp_sp.lua"))()local a=68;local b=250;local c=80;local d=2;local e=3;local f=4;local g=5;local h=d;local i=nil;local j=1;local k=1;local l=0;local m=0;local n=0;local o=0;backgroundFill=backgroundFill or ERASE;foregroundColor=foregroundColor or SOLID;globalTextOptions=globalTextOptions or 0;function mergeUint16(p,q)return bit32.lshift(q,8)+p end;freqLookup={{5865,5845,5825,5805,5785,5765,5745,5725},{5733,5752,5771,5790,5809,5828,5847,5866},{5705,5685,5665,5645,5885,5905,5925,5945},{5740,5760,5780,5800,5820,5840,5860,5880},{5658,5695,5732,5769,5806,5843,5880,5917}}function updateVTXFreq(r)r.values["f"]=freqLookup[r.values[2]][r.values[3]]end;function postReadVTX(r)if r.values[1]==3 then r.fields[3].table={25,200,500,800}r.fields[3].max=4 elseif r.values[1]==4 then r.fields[3].table={25,100,200,400,600}r.fields[3].max=5 else end;if r.values and r.values[2]and r.values[3]then if r.values[2]>0 and r.values[3]>0 then updateVTXFreq(r)else r.values=nil end end end;function getWriteValuesVTX(s)local t=(s[2]-1)*8+s[3]-1;return{bit32.band(t,0xFF),bit32.rshift(t,8),s[4],s[5]}end;function postReadRates(r)if#r.values==12 then r.values[9]=mergeUint16(r.values[9],r.values[10])end end;function getWriteValuesRates(s)return{s[1],s[2],s[3],s[4],s[5],s[6],s[7],s[8],bit32.band(s[9],0xFF),bit32.rshift(s[9],8),s[11],s[12]}end;function postReadRatesAdv(r)if#r.values==23 then r.values[20]=mergeUint16(r.values[20],r.values[21])r.values[22]=mergeUint16(r.values[22],r.values[23])/1000 end end;function getWriteValuesRatesAdv(s)return{s[1],s[2],s[3],s[4],s[5],s[6],s[7],s[8],s[9],s[10],s[11],s[12],s[13],s[14],s[15],s[16],s[17],s[18],s[19],bit32.band(s[20],0xFF),bit32.rshift(s[20],8),bit32.band(s[22]*1000,0xFF),bit32.rshift(s[22]*1000,8)}end;function postReadFilters(r)if#r.values==18 then r.values[2]=mergeUint16(r.values[2],r.values[3])r.values[3]=mergeUint16(r.values[4],r.values[5])r.values[4]=mergeUint16(r.values[6],r.values[7])r.values[5]=mergeUint16(r.values[8],r.values[9])r.values[6]=mergeUint16(r.values[14],r.values[15])r.values[7]=mergeUint16(r.values[16],r.values[17])r.values[8]=mergeUint16(r.values[10],r.values[11])r.values[9]=mergeUint16(r.values[12],r.values[13])r.values[10]=r.values[18]end end;function getWriteValuesFilters(s)return{s[1],bit32.band(s[2],0xFF),bit32.band(bit32.rshift(s[2],8),0xFF),bit32.band(s[3],0xFF),bit32.band(bit32.rshift(s[3],8),0xFF),bit32.band(s[4],0xFF),bit32.band(bit32.rshift(s[4],8),0xFF),bit32.band(s[5],0xFF),bit32.band(bit32.rshift(s[5],8),0xFF),bit32.band(s[8],0xFF),bit32.band(bit32.rshift(s[8],8),0xFF),bit32.band(s[9],0xFF),bit32.band(bit32.rshift(s[9],8),0xFF),bit32.band(s[6],0xFF),bit32.band(bit32.rshift(s[6],8),0xFF),bit32.band(s[7],0xFF),bit32.band(bit32.rshift(s[7],8),0xFF),s[10]}end;function updateRateTables()if SetupPages[j].values[9]==0 then calculateGyroRates(SetupPages[j],8)calculatePidRates(SetupPages[j],8)elseif SetupPages[j].values[9]==1 then calculateGyroRates(SetupPages[j],32)calculatePidRates(SetupPages[j],32)end end;function updatePidRateTable()local u=SetupPages[j].values[1]local v=SetupPages[j].gyroRates[u]calculatePidRates(SetupPages[j],v)end;function calculateGyroRates(r,w)r.gyroRates={}r.fields[2].table={}for x=1,32 do r.gyroRates[x]=w/x;local y=nil;r.fields[2].table[x]=string.format("%.2f",w/x)end end;function calculatePidRates(r,w)r.fields[3].table={}for x=1,16 do r.fields[3].table[x]=string.format("%.2f",w/x)end end;function postReadAdvanced(r)if#r.values==10 then r.values[5]=mergeUint16(r.values[5],r.values[6])r.values[7]=mergeUint16(r.values[7],r.values[8])end;local u=r.values[1]if r.values[9]==0 then calculateGyroRates(r,8)else calculateGyroRates(r,32)end;local v=r.gyroRates[u]calculatePidRates(r,v)end;function getWriteValuesAdvanced(s)return{s[1],s[2],s[3],s[4],bit32.band(s[5],0xFF),bit32.rshift(s[5],8),bit32.band(s[7],0xFF),bit32.rshift(s[7],8),s[9],s[10]}end;local function z(A)local r=SetupPages[j]if r.values then if r.getWriteValues then mspSendRequest(r.write,r.getWriteValues(r.values))else mspSendRequest(r.write,r.values)end;l=getTime()if h==f then n=n+1 else h=f;n=0;o=r.saveMaxRetries or 2;m=r.saveTimeout or 150 end end end;local function B()for x=1,#SetupPages do local r=SetupPages[x]r.values=nil end;h=d;l=0 end;local C={{t="save page",f=z},{t="reload",f=B}}local D=false;local E=false;local function F(G,H)if G==nil or H==nil then return end;local r=SetupPages[j]if G==r.write then if r.eepromWrite then mspSendRequest(b,{})end;return end;if G==b then h=d;r.values=nil;l=0;if r.reboot then mspSendRequest(a,{})end;return end;if G~=r.read then return end;if#H>0 then r.values={}for x=1,#H do r.values[x]=H[x]end;if r.postRead~=nil then r.postRead(r)end end end;local function I()return#SetupPages[j].fields end;function cachePageElements(r)if not i then i=assert(loadScript(screenPath..r.screen))()r.read=i.read;r.write=i.write;r.eepromWrite=i.eepromWrite;r.reboot=i.reboot;if i.postRead then r.postRead=i.postRead end;if i.getWriteValues then r.getWriteValues=i.getWriteValues end;if i.saveMaxRetries then r.saveMaxRetries=i.saveMaxRetries end;if i.saveTimeout then r.saveTimeout=i.saveTimeout end;if i.gyroTables then r.gyroTables=i.gyroTables end;r.title=i.title;r.text=i.text;r.fields=i.fields end end;function clearPageElements(r)r.read=nil;r.write=nil;r.eepromWrite=nil;r.reboot=nil;r.postRead=nil;r.getWriteValues=nil;r.saveMaxRetries=nil;r.saveTimeout=nil;r.title=nil;r.text=nil;r.fields=nil;r.values=nil;r.gyroTables=nil;i=nil end;local function J(K)j=j+K;if j>#SetupPages then j=1 elseif j<1 then j=#SetupPages end;k=1 end;local function L(K)k=k+K;if k>I()then k=1 elseif k<1 then k=I()end end;local function M(K)E=E+K;if E>#C then E=1 elseif E<1 then E=#C end end;local function N(r)if r.read and(r.reqTS==nil or r.reqTS+c<=getTime())then r.reqTS=getTime()mspSendRequest(r.read,{})end end;function drawScreenTitle(O)lcd.drawFilledRectangle(0,0,LCD_W,10)lcd.drawText(1,1,O,INVERS)end;local function P(r,Q)local O=r.title;drawScreenTitle("Betaflight / "..O)for x=1,#r.text do local R=r.text[x]if R.to==nil then lcd.drawText(R.x,R.y,R.t,globalTextOptions)else lcd.drawText(R.x,R.y,R.t,R.to)end end;for x=1,#r.fields do local R=r.fields[x]local S=globalTextOptions;if x==k then S=INVERS;if h==e then S=S+BLINK end end;local T=20;if R.t~=nil then lcd.drawText(R.x,R.y,R.t..":",globalTextOptions)if R.sp~=nil then T=R.sp end else T=0 end;local U=R.i or x;if r.values and r.values[U]then local V=r.values[U]if R.table and R.table[r.values[U]]then V=R.table[r.values[U]]end;lcd.drawText(R.x+T,R.y,V,S)else lcd.drawText(R.x+T,R.y,"---",S)end end end;local function W(V,X,Y)if V<X then V=X elseif V>Y then V=Y end;return V end;local function Z()local r=SetupPages[j]return r.fields[k]end;local function _(K)local r=SetupPages[j]local a0=r.fields[k]local U=a0.i or k;r.values[U]=W(r.values[U]+K,a0.min or 0,a0.max or 255)if a0.upd then a0.upd(r)end end;local function a1()local a2=MenuBox.x;local a3=MenuBox.y;local a4=MenuBox.w;local a5=MenuBox.h_line;local a6=MenuBox.h_offset;local a7=#C*a5+a6*2;lcd.drawFilledRectangle(a2,a3,a4,a7,backgroundFill)lcd.drawRectangle(a2,a3,a4-1,a7-1,foregroundColor)lcd.drawText(a2+a5/2,a3+a6,"Menu:",globalTextOptions)for x,a8 in ipairs(C)do local S=globalTextOptions;if E==x then S=S+INVERS end;lcd.drawText(a2+MenuBox.x_offset,a3+(x-1)*a5+a6,a8.t,S)end end;local a9=0;local aa=0;local function ab(ac)local ad=getTime()if a9+50<ad then B()end;a9=ad;if h==f and l+m<ad then if n<o then z()else h=d;B()end end;mspProcessTxQ()if ac==EVT_MENU_LONG then E=1;h=g elseif EVT_PAGEUP_FIRST and ac==EVT_ENTER_LONG then E=1;aa=1;h=g elseif h==g then if ac==EVT_EXIT_BREAK then h=d elseif ac==EVT_PLUS_BREAK or ac==EVT_ROT_LEFT then M(-1)elseif ac==EVT_MINUS_BREAK or ac==EVT_ROT_RIGHT then M(1)elseif ac==EVT_ENTER_BREAK then if aa==1 then aa=0 else h=d;C[E].f()end end elseif h<=d then if ac==EVT_PAGEUP_FIRST then clearPageElements(SetupPages[j])J(-1)elseif ac==EVT_MENU_BREAK or ac==EVT_PAGEDN_FIRST then clearPageElements(SetupPages[j])J(1)elseif ac==EVT_PLUS_BREAK or ac==EVT_ROT_LEFT then L(-1)elseif ac==EVT_MINUS_BREAK or ac==EVT_ROT_RIGHT then L(1)elseif ac==EVT_ENTER_BREAK then local r=SetupPages[j]local a0=r.fields[k]local U=a0.i or k;if r.values and r.values[U]and a0.ro~=true then h=e end end elseif h==e then if ac==EVT_EXIT_BREAK or ac==EVT_ENTER_BREAK then h=d elseif ac==EVT_PLUS_FIRST or ac==EVT_PLUS_REPT or ac==EVT_ROT_RIGHT then _(1)elseif ac==EVT_MINUS_FIRST or ac==EVT_MINUS_REPT or ac==EVT_ROT_LEFT then _(-1)end end;local r=SetupPages[j]local Q=false;cachePageElements(r)if not r.values then N(r)Q=true end;lcd.clear()if TEXT_BGCOLOR then lcd.drawFilledRectangle(0,0,LCD_W,LCD_H,TEXT_BGCOLOR)end;P(r,Q)if getValue("RSSI")==0 then lcd.drawText(NoTelem[1],NoTelem[2],NoTelem[3],NoTelem[4])end;if h==g then a1()elseif h==f then lcd.drawFilledRectangle(SaveBox.x,SaveBox.y,SaveBox.w,SaveBox.h,backgroundFill)lcd.drawRectangle(SaveBox.x,SaveBox.y,SaveBox.w,SaveBox.h,SOLID)lcd.drawText(SaveBox.x+SaveBox.x_offset,SaveBox.y+SaveBox.h_offset,"Saving...",DBLSIZE+BLINK+globalTextOptions)end;F(mspPollReply())return 0 end;return ab
